AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Transcribe Post Call Analytics - PCA Server - Matplotlib Download

Transform: AWS::Serverless-2016-10-31

Parameters:

  SupportFilesBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: SupportFilesBucketName

  SupportFilesBucketKmsKeyArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: SupportFilesBucketKmsKey

  MPLZipName:
    Type: String
    Default: matplotlib-layer.zip

Conditions:
  SupportFilesBucketCustomKey: !Not [!Equals [!Ref SupportFilesBucketKmsKeyArn, 'AES256']]

Resources:
  mplZipFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: 
                  !Sub
                    - 'arn:aws:s3:::${bucket}*'
                    - bucket: !Ref SupportFilesBucketName
                Action:
                  - 's3:PutObject'
          PolicyName: mplZipFunctionS3Policy

  SupportFilesBucketKmsKeyPolicy:
    Condition: SupportFilesBucketCustomKey
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: MatplotlibTemplateSupportFilesBucketCustomKey
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: !Ref SupportFilesBucketKmsKeyArn
      Roles:
        - !Ref mplZipFunctionRole

  mplZipFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt 'mplZipFunctionRole.Arn'
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          SUPPORT_FILES_BUCKET: !Ref SupportFilesBucketName
          MPL_ZIP_NAME: !Ref MPLZipName
      Code:
        ZipFile: |
          import os
          import boto3
          from zipfile import ZipFile
          import subprocess
          import shutil
          import cfnresponse
          def handler(event, context):
            # Read off our env values
            bucket = os.environ['SUPPORT_FILES_BUCKET']
            zip_file_name = os.environ['MPL_ZIP_NAME']
            responseData = {}
            status = cfnresponse.SUCCESS
            if event['RequestType'] != 'Delete':
              try:
                # Create our folder
                os.chdir("/tmp")
                shutil.rmtree("python", ignore_errors=True)
                os.mkdir("python")
                # Download the libraries we need via pip
                subprocess.run(["pip", "install",
                                "numpy==1.19.4", "matplotlib==3.3.3",
                                "--target", "python",
                                "--only-binary=:all:",
                                "--platform", "manylinux1_x86_64",
                                "--python=3.8"], check=True)
                # Zip up what we downloaded
                with ZipFile(zip_file_name, 'w') as zipObj:
                  print(f"Creating zip file {zip_file_name} for upload...")
                  for folderName, subfolders, filenames in os.walk("python"):
                    for filename in filenames:
                      # create complete filepath of file in directory
                      filePath = os.path.join(folderName, filename)
                      zipObj.write(filePath)
                # Upload zipfile to S3
                print(f"Uploading {zip_file_name} to s3 bucket {bucket}...")
                s3_client = boto3.client('s3')
                response = s3_client.upload_file(zip_file_name, bucket, zip_file_name)
              except Exception as e:
                print(e)
                responseData["Error"] = f"Exception thrown: {e}"
                status = cfnresponse.FAILED
            cfnresponse.send(event, context, status, responseData)

      
  mplZip:
    Type: Custom::mplZip
    Properties:
      ServiceToken: !GetAtt mplZipFunction.Arn
      
Outputs:
  MPLZipName:
    Value: !Ref MPLZipName